% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parquet_setup.R
\name{parquet_setup}
\alias{parquet_setup}
\alias{parquet_import}
\alias{parquet_tbl}
\alias{cMDClickCache}
\title{Setup a connection to a DuckDB database with Parquet data}
\usage{
parquet_setup(
  db = "cMDClick.duckdb",
  dbdir = cMDClickCache(verbose = verbose),
  verbose = FALSE
)

parquet_import(
  con,
  dataType = c("metaphlan_bugs", "marker_abundances", "marker_presences"),
  verbose = FALSE
)

parquet_tbl(
  con,
  dataType = c("metaphlan_bugs", "marker_abundances", "marker_presences"),
  verbose = FALSE
)

cMDClickCache(
  cache_dir = getOption("cMDClickCache", tools::R_user_dir("cMDClick", "cache")),
  verbose = TRUE,
  ask = interactive()
)
}
\arguments{
\item{db}{\code{character(1)} The name of the database file (default:
"cMDClick.duckdb").}

\item{dbdir}{\code{character(1)} The directory where the database file is stored
(default: \code{cMDClickCache()}).}

\item{verbose}{\code{logical(1)} Show informative messages in the console
(default: \code{FALSE}).}

\item{con}{\code{duckdb_connection} A connection object to a DuckDB database.}

\item{dataType}{\code{character()} The type of data to import. Can be one or more
of "metaphlan_bugs", "marker_abundances", or "marker_presences". By
default, all three are imported.}

\item{cache_dir}{\code{character(1)} The directory where the cache is stored.}

\item{ask}{\code{logical(1)} Ask the user to create the cache directory if it does
not exist (default: \code{interactive()}).}
}
\description{
This function creates a connection to a DuckDB database and
imports Parquet data from \url{https://store.cancerdatasci.org}.
}
\details{
The \code{parquet_setup} function provides a connection object for use
with either \code{parquet_import} or \code{parquet_tbl} functions. The
\code{parquet_import} downloads the entirety of the data and stores it in the
user's local cache (see \code{cMDClickCache()}). The \code{parquet_tbl} function uses
the connection object to connect to the storage location and allow remote
querying of the data. Note that \code{dplyr::collect()} must be used to obtain
the full data from the server.
}
\examples{
if (interactive()) {
    con <- parquet_setup()
    parquet_import(con, dataType = "metaphlan_bugs", verbose = TRUE)
    ## check the local cache for downloaded tables
    DBI::dbListTables(con)
    ## query the local cache and filter
    dplyr::tbl(con, "metaphlan_bugs") |>
        dplyr::filter(tax_id_string == "2|1239||||") |>
        dplyr::collect()
    ## query the parquet file remotely
    parquet_tbl(con, "metaphlan_bugs") |>
        dplyr::filter(tax_id_string == "2|1239||||") |>
        dplyr::collect()
    DBI::dbDisconnect(con)
}
}
